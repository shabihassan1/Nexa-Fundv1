/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  UniversalEscrow,
  UniversalEscrowInterface,
} from "../UniversalEscrow";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldAdmin",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "backer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "backer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "Refunded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "Released",
    type: "event",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "backers",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable[]",
        name: "backerAddresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "batchRefund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
    ],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllBackers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBackerCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "backer",
        type: "address",
      },
    ],
    name: "getBackerDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isBackerRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "backer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "refund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610d8f806100326000396000f3fe6080604052600436106100c65760003560e01c8063b00a96fe1161007f578063e9d8002011610059578063e9d8002014610317578063f851a4401461034f578063fc7e286d1461036f578063ffd327301461039c57600080fd5b8063b00a96fe146102a1578063cf8e0cd1146102c1578063e4fe0f31146102e157600080fd5b806312065fe0146101c6578063332f1cec146101e85780636162f17e1461020a5780636ff1c9bc1461021f5780638f28397014610241578063a099d79a1461026157600080fd5b366101c157600034116100f45760405162461bcd60e51b81526004016100eb90610a51565b60405180910390fd5b3360009081526001602052604081208054349290610113908490610a76565b90915550503360009081526003602052604090205460ff1661018a576002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b031916339081179091556000908152600360205260409020805460ff191690911790555b60405134815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a2005b600080fd5b3480156101d257600080fd5b50475b6040519081526020015b60405180910390f35b3480156101f457600080fd5b506101fd6103bc565b6040516101df9190610a9d565b34801561021657600080fd5b506002546101d5565b34801561022b57600080fd5b5061023f61023a366004610b02565b61041e565b005b34801561024d57600080fd5b5061023f61025c366004610b02565b61051a565b34801561026d57600080fd5b5061029161027c366004610b02565b60036020526000908152604090205460ff1681565b60405190151581526020016101df565b3480156102ad57600080fd5b5061023f6102bc366004610b6f565b6105ba565b3480156102cd57600080fd5b5061023f6102dc366004610b6f565b6106f3565b3480156102ed57600080fd5b506101d56102fc366004610b02565b6001600160a01b031660009081526001602052604090205490565b34801561032357600080fd5b50610337610332366004610bcb565b61081e565b6040516001600160a01b0390911681526020016101df565b34801561035b57600080fd5b50600054610337906001600160a01b031681565b34801561037b57600080fd5b506101d561038a366004610b02565b60016020526000908152604090205481565b3480156103a857600080fd5b5061023f6103b7366004610c29565b610848565b6060600280548060200260200160405190810160405280929190818152602001828054801561041457602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103f6575b5050505050905090565b6000546001600160a01b031633146104485760405162461bcd60e51b81526004016100eb90610cc3565b6001600160a01b03811661046e5760405162461bcd60e51b81526004016100eb90610ce7565b60405147906001600160a01b0383169082156108fc029083906000818181858888f193505050501580156104a6573d6000803e3d6000fd5b50816001600160a01b03167ff1e482cbb262d173bce7d49f1f10ba8c01c3d9d8ab9791ab8119bd43b1a4ff908260405161050e918152604060208201819052601490820152731153515491d15390d657d5d2551211149055d05360621b606082015260800190565b60405180910390a25050565b6000546001600160a01b031633146105445760405162461bcd60e51b81526004016100eb90610cc3565b6001600160a01b03811661056a5760405162461bcd60e51b81526004016100eb90610ce7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9190a35050565b6000546001600160a01b031633146105e45760405162461bcd60e51b81526004016100eb90610cc3565b6001600160a01b03841661060a5760405162461bcd60e51b81526004016100eb90610ce7565b6000831161062a5760405162461bcd60e51b81526004016100eb90610a51565b824710156106715760405162461bcd60e51b8152602060048201526014602482015273494e53554646494349454e545f42414c414e434560601b60448201526064016100eb565b6040516001600160a01b0385169084156108fc029085906000818181858888f193505050501580156106a7573d6000803e3d6000fd5b50836001600160a01b03167fca15137148c4fd79778d6f6a3d6833d6bbc140f167d9eb76644af5763d93c2218484846040516106e593929190610d0d565b60405180910390a250505050565b6000546001600160a01b0316331461071d5760405162461bcd60e51b81526004016100eb90610cc3565b6001600160a01b0384166107435760405162461bcd60e51b81526004016100eb90610ce7565b600083116107635760405162461bcd60e51b81526004016100eb90610a51565b824710156107aa5760405162461bcd60e51b8152602060048201526014602482015273494e53554646494349454e545f42414c414e434560601b60448201526064016100eb565b6040516001600160a01b0385169084156108fc029085906000818181858888f193505050501580156107e0573d6000803e3d6000fd5b50836001600160a01b03167ff1e482cbb262d173bce7d49f1f10ba8c01c3d9d8ab9791ab8119bd43b1a4ff908484846040516106e593929190610d0d565b6002818154811061082e57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b031633146108725760405162461bcd60e51b81526004016100eb90610cc3565b8483146108b35760405162461bcd60e51b815260206004820152600f60248201526e0988a9c8ea890be9a92a69a82a8869608b1b60448201526064016100eb565b60005b85811015610a485760008787838181106108d2576108d2610d43565b90506020020160208101906108e79190610b02565b6001600160a01b03160361090d5760405162461bcd60e51b81526004016100eb90610ce7565b600085858381811061092157610921610d43565b90506020020135116109455760405162461bcd60e51b81526004016100eb90610a51565b86868281811061095757610957610d43565b905060200201602081019061096c9190610b02565b6001600160a01b03166108fc86868481811061098a5761098a610d43565b905060200201359081150290604051600060405180830381858888f193505050501580156109bc573d6000803e3d6000fd5b508686828181106109cf576109cf610d43565b90506020020160208101906109e49190610b02565b6001600160a01b03167fca15137148c4fd79778d6f6a3d6833d6bbc140f167d9eb76644af5763d93c221868684818110610a2057610a20610d43565b905060200201358585604051610a3893929190610d0d565b60405180910390a26001016108b6565b50505050505050565b6020808252600b908201526a16915493d7d05353d5539560aa1b604082015260600190565b80820180821115610a9757634e487b7160e01b600052601160045260246000fd5b92915050565b6020808252825182820181905260009190848201906040850190845b81811015610ade5783516001600160a01b031683529284019291840191600101610ab9565b50909695505050505050565b6001600160a01b0381168114610aff57600080fd5b50565b600060208284031215610b1457600080fd5b8135610b1f81610aea565b9392505050565b60008083601f840112610b3857600080fd5b50813567ffffffffffffffff811115610b5057600080fd5b602083019150836020828501011115610b6857600080fd5b9250929050565b60008060008060608587031215610b8557600080fd5b8435610b9081610aea565b935060208501359250604085013567ffffffffffffffff811115610bb357600080fd5b610bbf87828801610b26565b95989497509550505050565b600060208284031215610bdd57600080fd5b5035919050565b60008083601f840112610bf657600080fd5b50813567ffffffffffffffff811115610c0e57600080fd5b6020830191508360208260051b8501011115610b6857600080fd5b60008060008060008060608789031215610c4257600080fd5b863567ffffffffffffffff80821115610c5a57600080fd5b610c668a838b01610be4565b90985096506020890135915080821115610c7f57600080fd5b610c8b8a838b01610be4565b90965094506040890135915080821115610ca457600080fd5b50610cb189828a01610b26565b979a9699509497509295939492505050565b6020808252600a908201526927a7262cafa0a226a4a760b11b604082015260600190565b6020808252600c908201526b5a45524f5f4144445245535360a01b604082015260600190565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122064209f52a91568c4cbe6c89f498412364de009ad328f2a4c272ba0b4f4ed867564736f6c63430008180033";

type UniversalEscrowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniversalEscrowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniversalEscrow__factory extends ContractFactory {
  constructor(...args: UniversalEscrowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UniversalEscrow & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UniversalEscrow__factory {
    return super.connect(runner) as UniversalEscrow__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniversalEscrowInterface {
    return new Interface(_abi) as UniversalEscrowInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UniversalEscrow {
    return new Contract(address, _abi, runner) as unknown as UniversalEscrow;
  }
}
