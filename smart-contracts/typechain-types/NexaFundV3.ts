/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface NexaFundV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "backerList"
      | "cancelCampaign"
      | "cancelled"
      | "claimCancellationRefund"
      | "claimRefund"
      | "contribute"
      | "contributions"
      | "creator"
      | "getAllPendingRefunds"
      | "getBackerAddress"
      | "getBackerCount"
      | "getBalance"
      | "getMilestone"
      | "getMilestonesCount"
      | "getPendingRefund"
      | "goal"
      | "milestones"
      | "raised"
      | "refundClaimed"
      | "rejectMilestone"
      | "releaseMilestone"
      | "transferAdmin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCancelled"
      | "CancellationRefundIssued"
      | "Contributed"
      | "MilestoneRejected"
      | "MilestoneReleased"
      | "RefundIssued"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "backerList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cancelled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimCancellationRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllPendingRefunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBackerAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBackerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestonesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRefund",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "goal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "raised", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundClaimed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "backerList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCancellationRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPendingRefunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBackerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBackerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMilestonesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raised", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
}

export namespace CampaignCancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancellationRefundIssuedEvent {
  export type InputTuple = [backer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [backer: string, amount: bigint];
  export interface OutputObject {
    backer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributedEvent {
  export type InputTuple = [backer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [backer: string, amount: bigint];
  export interface OutputObject {
    backer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneRejectedEvent {
  export type InputTuple = [milestoneIndex: BigNumberish];
  export type OutputTuple = [milestoneIndex: bigint];
  export interface OutputObject {
    milestoneIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneReleasedEvent {
  export type InputTuple = [
    milestoneIndex: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    milestoneIndex: bigint,
    amount: bigint,
    to: string
  ];
  export interface OutputObject {
    milestoneIndex: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundIssuedEvent {
  export type InputTuple = [
    backer: AddressLike,
    milestoneIndex: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    backer: string,
    milestoneIndex: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    backer: string;
    milestoneIndex: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NexaFundV3 extends BaseContract {
  connect(runner?: ContractRunner | null): NexaFundV3;
  waitForDeployment(): Promise<this>;

  interface: NexaFundV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  backerList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  cancelCampaign: TypedContractMethod<[], [void], "nonpayable">;

  cancelled: TypedContractMethod<[], [boolean], "view">;

  claimCancellationRefund: TypedContractMethod<[], [void], "nonpayable">;

  claimRefund: TypedContractMethod<
    [milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  contribute: TypedContractMethod<[], [void], "payable">;

  contributions: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  getAllPendingRefunds: TypedContractMethod<
    [backer: AddressLike],
    [bigint],
    "view"
  >;

  getBackerAddress: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getBackerCount: TypedContractMethod<[], [bigint], "view">;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getMilestone: TypedContractMethod<
    [index: BigNumberish],
    [
      [bigint, boolean, boolean] & {
        amount: bigint;
        released: boolean;
        rejected: boolean;
      }
    ],
    "view"
  >;

  getMilestonesCount: TypedContractMethod<[], [bigint], "view">;

  getPendingRefund: TypedContractMethod<
    [backer: AddressLike, milestoneIndex: BigNumberish],
    [bigint],
    "view"
  >;

  goal: TypedContractMethod<[], [bigint], "view">;

  milestones: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, boolean, boolean] & {
        amount: bigint;
        released: boolean;
        rejected: boolean;
      }
    ],
    "view"
  >;

  raised: TypedContractMethod<[], [bigint], "view">;

  refundClaimed: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  rejectMilestone: TypedContractMethod<
    [milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  releaseMilestone: TypedContractMethod<
    [milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "backerList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "cancelCampaign"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimCancellationRefund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[milestoneIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "contributions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllPendingRefunds"
  ): TypedContractMethod<[backer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBackerAddress"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBackerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMilestone"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [bigint, boolean, boolean] & {
        amount: bigint;
        released: boolean;
        rejected: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMilestonesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingRefund"
  ): TypedContractMethod<
    [backer: AddressLike, milestoneIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "goal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, boolean, boolean] & {
        amount: bigint;
        released: boolean;
        rejected: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "raised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundClaimed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "rejectMilestone"
  ): TypedContractMethod<[milestoneIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseMilestone"
  ): TypedContractMethod<[milestoneIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CampaignCancelled"
  ): TypedContractEvent<
    CampaignCancelledEvent.InputTuple,
    CampaignCancelledEvent.OutputTuple,
    CampaignCancelledEvent.OutputObject
  >;
  getEvent(
    key: "CancellationRefundIssued"
  ): TypedContractEvent<
    CancellationRefundIssuedEvent.InputTuple,
    CancellationRefundIssuedEvent.OutputTuple,
    CancellationRefundIssuedEvent.OutputObject
  >;
  getEvent(
    key: "Contributed"
  ): TypedContractEvent<
    ContributedEvent.InputTuple,
    ContributedEvent.OutputTuple,
    ContributedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneRejected"
  ): TypedContractEvent<
    MilestoneRejectedEvent.InputTuple,
    MilestoneRejectedEvent.OutputTuple,
    MilestoneRejectedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneReleased"
  ): TypedContractEvent<
    MilestoneReleasedEvent.InputTuple,
    MilestoneReleasedEvent.OutputTuple,
    MilestoneReleasedEvent.OutputObject
  >;
  getEvent(
    key: "RefundIssued"
  ): TypedContractEvent<
    RefundIssuedEvent.InputTuple,
    RefundIssuedEvent.OutputTuple,
    RefundIssuedEvent.OutputObject
  >;

  filters: {
    "CampaignCancelled()": TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;
    CampaignCancelled: TypedContractEvent<
      CampaignCancelledEvent.InputTuple,
      CampaignCancelledEvent.OutputTuple,
      CampaignCancelledEvent.OutputObject
    >;

    "CancellationRefundIssued(address,uint256)": TypedContractEvent<
      CancellationRefundIssuedEvent.InputTuple,
      CancellationRefundIssuedEvent.OutputTuple,
      CancellationRefundIssuedEvent.OutputObject
    >;
    CancellationRefundIssued: TypedContractEvent<
      CancellationRefundIssuedEvent.InputTuple,
      CancellationRefundIssuedEvent.OutputTuple,
      CancellationRefundIssuedEvent.OutputObject
    >;

    "Contributed(address,uint256)": TypedContractEvent<
      ContributedEvent.InputTuple,
      ContributedEvent.OutputTuple,
      ContributedEvent.OutputObject
    >;
    Contributed: TypedContractEvent<
      ContributedEvent.InputTuple,
      ContributedEvent.OutputTuple,
      ContributedEvent.OutputObject
    >;

    "MilestoneRejected(uint256)": TypedContractEvent<
      MilestoneRejectedEvent.InputTuple,
      MilestoneRejectedEvent.OutputTuple,
      MilestoneRejectedEvent.OutputObject
    >;
    MilestoneRejected: TypedContractEvent<
      MilestoneRejectedEvent.InputTuple,
      MilestoneRejectedEvent.OutputTuple,
      MilestoneRejectedEvent.OutputObject
    >;

    "MilestoneReleased(uint256,uint256,address)": TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;
    MilestoneReleased: TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;

    "RefundIssued(address,uint256,uint256)": TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
    RefundIssued: TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
  };
}
