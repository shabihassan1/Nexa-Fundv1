/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface NexaFundWeightedV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_QUORUM_POWER"
      | "YES_THRESHOLD_PCT"
      | "admin"
      | "adminForceRelease"
      | "adminRefund"
      | "adminRejectMilestone"
      | "cancel"
      | "cancelled"
      | "claimCancellationRefund"
      | "claimRefund"
      | "contribute"
      | "contributions"
      | "creator"
      | "finalize"
      | "getMilestone"
      | "getMilestoneCount"
      | "getPendingRefunds"
      | "getRefundAmount"
      | "goal"
      | "hasVoted"
      | "milestones"
      | "openVoting"
      | "raised"
      | "refundClaimed"
      | "totalRefunded"
      | "transferAdmin"
      | "voteMilestone"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminTransferred"
      | "Cancelled"
      | "Contributed"
      | "MilestoneRejected"
      | "MilestoneReleased"
      | "RefundIssued"
      | "Voted"
      | "VotingOpened"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_QUORUM_POWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YES_THRESHOLD_PCT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adminForceRelease",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRefund",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRejectMilestone",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(functionFragment: "cancelled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimCancellationRefund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestoneCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRefunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "goal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openVoting",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "raised", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundClaimed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRefunded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteMilestone",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_QUORUM_POWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YES_THRESHOLD_PCT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adminForceRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRejectMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimCancellationRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMilestoneCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRefunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openVoting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raised", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteMilestone",
    data: BytesLike
  ): Result;
}

export namespace AdminTransferredEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributedEvent {
  export type InputTuple = [backer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [backer: string, amount: bigint];
  export interface OutputObject {
    backer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneRejectedEvent {
  export type InputTuple = [milestone: BigNumberish, reason: string];
  export type OutputTuple = [milestone: bigint, reason: string];
  export interface OutputObject {
    milestone: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneReleasedEvent {
  export type InputTuple = [
    milestone: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [milestone: bigint, amount: bigint, to: string];
  export interface OutputObject {
    milestone: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundIssuedEvent {
  export type InputTuple = [
    backer: AddressLike,
    milestone: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [backer: string, milestone: bigint, amount: bigint];
  export interface OutputObject {
    backer: string;
    milestone: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    backer: AddressLike,
    milestone: BigNumberish,
    approve: boolean,
    power: BigNumberish
  ];
  export type OutputTuple = [
    backer: string,
    milestone: bigint,
    approve: boolean,
    power: bigint
  ];
  export interface OutputObject {
    backer: string;
    milestone: bigint;
    approve: boolean;
    power: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingOpenedEvent {
  export type InputTuple = [
    milestone: BigNumberish,
    start: BigNumberish,
    end: BigNumberish
  ];
  export type OutputTuple = [milestone: bigint, start: bigint, end: bigint];
  export interface OutputObject {
    milestone: bigint;
    start: bigint;
    end: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NexaFundWeightedV2 extends BaseContract {
  connect(runner?: ContractRunner | null): NexaFundWeightedV2;
  waitForDeployment(): Promise<this>;

  interface: NexaFundWeightedV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_QUORUM_POWER: TypedContractMethod<[], [bigint], "view">;

  YES_THRESHOLD_PCT: TypedContractMethod<[], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  adminForceRelease: TypedContractMethod<
    [milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  adminRefund: TypedContractMethod<
    [to: AddressLike, amountWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  adminRejectMilestone: TypedContractMethod<
    [milestoneIndex: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  cancel: TypedContractMethod<[], [void], "nonpayable">;

  cancelled: TypedContractMethod<[], [boolean], "view">;

  claimCancellationRefund: TypedContractMethod<[], [void], "nonpayable">;

  claimRefund: TypedContractMethod<
    [milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  contribute: TypedContractMethod<[], [void], "payable">;

  contributions: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  finalize: TypedContractMethod<
    [milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMilestone: TypedContractMethod<
    [i: BigNumberish],
    [
      [string, bigint, boolean, boolean, bigint, bigint, bigint, bigint] & {
        description: string;
        amount: bigint;
        released: boolean;
        rejected: boolean;
        yesPower: bigint;
        noPower: bigint;
        voteStart: bigint;
        voteEnd: bigint;
      }
    ],
    "view"
  >;

  getMilestoneCount: TypedContractMethod<[], [bigint], "view">;

  getPendingRefunds: TypedContractMethod<
    [backer: AddressLike],
    [
      [bigint[], bigint[]] & {
        milestoneIndices: bigint[];
        refundAmounts: bigint[];
      }
    ],
    "view"
  >;

  getRefundAmount: TypedContractMethod<
    [backer: AddressLike, milestoneIndex: BigNumberish],
    [bigint],
    "view"
  >;

  goal: TypedContractMethod<[], [bigint], "view">;

  hasVoted: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  milestones: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean, bigint, bigint, bigint, bigint] & {
        description: string;
        amount: bigint;
        released: boolean;
        rejected: boolean;
        yesPower: bigint;
        noPower: bigint;
        voteStart: bigint;
        voteEnd: bigint;
      }
    ],
    "view"
  >;

  openVoting: TypedContractMethod<
    [milestoneIndex: BigNumberish, start: BigNumberish, end: BigNumberish],
    [void],
    "nonpayable"
  >;

  raised: TypedContractMethod<[], [bigint], "view">;

  refundClaimed: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  totalRefunded: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  transferAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  voteMilestone: TypedContractMethod<
    [milestoneIndex: BigNumberish, approve: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_QUORUM_POWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "YES_THRESHOLD_PCT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "adminForceRelease"
  ): TypedContractMethod<[milestoneIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminRefund"
  ): TypedContractMethod<
    [to: AddressLike, amountWei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminRejectMilestone"
  ): TypedContractMethod<
    [milestoneIndex: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "claimCancellationRefund"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[milestoneIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "contributions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "finalize"
  ): TypedContractMethod<[milestoneIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMilestone"
  ): TypedContractMethod<
    [i: BigNumberish],
    [
      [string, bigint, boolean, boolean, bigint, bigint, bigint, bigint] & {
        description: string;
        amount: bigint;
        released: boolean;
        rejected: boolean;
        yesPower: bigint;
        noPower: bigint;
        voteStart: bigint;
        voteEnd: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMilestoneCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingRefunds"
  ): TypedContractMethod<
    [backer: AddressLike],
    [
      [bigint[], bigint[]] & {
        milestoneIndices: bigint[];
        refundAmounts: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRefundAmount"
  ): TypedContractMethod<
    [backer: AddressLike, milestoneIndex: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "goal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, boolean, bigint, bigint, bigint, bigint] & {
        description: string;
        amount: bigint;
        released: boolean;
        rejected: boolean;
        yesPower: bigint;
        noPower: bigint;
        voteStart: bigint;
        voteEnd: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "openVoting"
  ): TypedContractMethod<
    [milestoneIndex: BigNumberish, start: BigNumberish, end: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "raised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundClaimed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalRefunded"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteMilestone"
  ): TypedContractMethod<
    [milestoneIndex: BigNumberish, approve: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminTransferred"
  ): TypedContractEvent<
    AdminTransferredEvent.InputTuple,
    AdminTransferredEvent.OutputTuple,
    AdminTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Cancelled"
  ): TypedContractEvent<
    CancelledEvent.InputTuple,
    CancelledEvent.OutputTuple,
    CancelledEvent.OutputObject
  >;
  getEvent(
    key: "Contributed"
  ): TypedContractEvent<
    ContributedEvent.InputTuple,
    ContributedEvent.OutputTuple,
    ContributedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneRejected"
  ): TypedContractEvent<
    MilestoneRejectedEvent.InputTuple,
    MilestoneRejectedEvent.OutputTuple,
    MilestoneRejectedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneReleased"
  ): TypedContractEvent<
    MilestoneReleasedEvent.InputTuple,
    MilestoneReleasedEvent.OutputTuple,
    MilestoneReleasedEvent.OutputObject
  >;
  getEvent(
    key: "RefundIssued"
  ): TypedContractEvent<
    RefundIssuedEvent.InputTuple,
    RefundIssuedEvent.OutputTuple,
    RefundIssuedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VotingOpened"
  ): TypedContractEvent<
    VotingOpenedEvent.InputTuple,
    VotingOpenedEvent.OutputTuple,
    VotingOpenedEvent.OutputObject
  >;

  filters: {
    "AdminTransferred(address,address)": TypedContractEvent<
      AdminTransferredEvent.InputTuple,
      AdminTransferredEvent.OutputTuple,
      AdminTransferredEvent.OutputObject
    >;
    AdminTransferred: TypedContractEvent<
      AdminTransferredEvent.InputTuple,
      AdminTransferredEvent.OutputTuple,
      AdminTransferredEvent.OutputObject
    >;

    "Cancelled()": TypedContractEvent<
      CancelledEvent.InputTuple,
      CancelledEvent.OutputTuple,
      CancelledEvent.OutputObject
    >;
    Cancelled: TypedContractEvent<
      CancelledEvent.InputTuple,
      CancelledEvent.OutputTuple,
      CancelledEvent.OutputObject
    >;

    "Contributed(address,uint256)": TypedContractEvent<
      ContributedEvent.InputTuple,
      ContributedEvent.OutputTuple,
      ContributedEvent.OutputObject
    >;
    Contributed: TypedContractEvent<
      ContributedEvent.InputTuple,
      ContributedEvent.OutputTuple,
      ContributedEvent.OutputObject
    >;

    "MilestoneRejected(uint256,string)": TypedContractEvent<
      MilestoneRejectedEvent.InputTuple,
      MilestoneRejectedEvent.OutputTuple,
      MilestoneRejectedEvent.OutputObject
    >;
    MilestoneRejected: TypedContractEvent<
      MilestoneRejectedEvent.InputTuple,
      MilestoneRejectedEvent.OutputTuple,
      MilestoneRejectedEvent.OutputObject
    >;

    "MilestoneReleased(uint256,uint256,address)": TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;
    MilestoneReleased: TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;

    "RefundIssued(address,uint256,uint256)": TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;
    RefundIssued: TypedContractEvent<
      RefundIssuedEvent.InputTuple,
      RefundIssuedEvent.OutputTuple,
      RefundIssuedEvent.OutputObject
    >;

    "Voted(address,uint256,bool,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VotingOpened(uint256,uint64,uint64)": TypedContractEvent<
      VotingOpenedEvent.InputTuple,
      VotingOpenedEvent.OutputTuple,
      VotingOpenedEvent.OutputObject
    >;
    VotingOpened: TypedContractEvent<
      VotingOpenedEvent.InputTuple,
      VotingOpenedEvent.OutputTuple,
      VotingOpenedEvent.OutputObject
    >;
  };
}
