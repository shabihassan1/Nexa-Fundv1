/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MilestoneEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMilestone"
      | "adminRefund"
      | "campaignOwner"
      | "cancelCampaign"
      | "cancelled"
      | "contribute"
      | "escrowBalance"
      | "milestones"
      | "milestonesCount"
      | "platformAdmin"
      | "releaseMilestone"
      | "totalDeposited"
      | "totalReleased"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cancelled"
      | "Contributed"
      | "MilestoneAdded"
      | "MilestoneReleased"
      | "Refunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRefund",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cancelled", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "milestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "milestonesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseMilestone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "escrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "milestones", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "milestonesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased",
    data: BytesLike
  ): Result;
}

export namespace CancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributedEvent {
  export type InputTuple = [backer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [backer: string, amount: bigint];
  export interface OutputObject {
    backer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneAddedEvent {
  export type InputTuple = [index: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [index: bigint, amount: bigint];
  export interface OutputObject {
    index: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneReleasedEvent {
  export type InputTuple = [
    index: BigNumberish,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [index: bigint, amount: bigint, to: string];
  export interface OutputObject {
    index: bigint;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MilestoneEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): MilestoneEscrow;
  waitForDeployment(): Promise<this>;

  interface: MilestoneEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMilestone: TypedContractMethod<
    [amountWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  adminRefund: TypedContractMethod<
    [to: AddressLike, amountWei: BigNumberish],
    [void],
    "nonpayable"
  >;

  campaignOwner: TypedContractMethod<[], [string], "view">;

  cancelCampaign: TypedContractMethod<[], [void], "nonpayable">;

  cancelled: TypedContractMethod<[], [boolean], "view">;

  contribute: TypedContractMethod<[], [void], "payable">;

  escrowBalance: TypedContractMethod<[], [bigint], "view">;

  milestones: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { amount: bigint; released: boolean }],
    "view"
  >;

  milestonesCount: TypedContractMethod<[], [bigint], "view">;

  platformAdmin: TypedContractMethod<[], [string], "view">;

  releaseMilestone: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalDeposited: TypedContractMethod<[], [bigint], "view">;

  totalReleased: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMilestone"
  ): TypedContractMethod<[amountWei: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminRefund"
  ): TypedContractMethod<
    [to: AddressLike, amountWei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "campaignOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelCampaign"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "escrowBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "milestones"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { amount: bigint; released: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "milestonesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseMilestone"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalReleased"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Cancelled"
  ): TypedContractEvent<
    CancelledEvent.InputTuple,
    CancelledEvent.OutputTuple,
    CancelledEvent.OutputObject
  >;
  getEvent(
    key: "Contributed"
  ): TypedContractEvent<
    ContributedEvent.InputTuple,
    ContributedEvent.OutputTuple,
    ContributedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneAdded"
  ): TypedContractEvent<
    MilestoneAddedEvent.InputTuple,
    MilestoneAddedEvent.OutputTuple,
    MilestoneAddedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneReleased"
  ): TypedContractEvent<
    MilestoneReleasedEvent.InputTuple,
    MilestoneReleasedEvent.OutputTuple,
    MilestoneReleasedEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;

  filters: {
    "Cancelled()": TypedContractEvent<
      CancelledEvent.InputTuple,
      CancelledEvent.OutputTuple,
      CancelledEvent.OutputObject
    >;
    Cancelled: TypedContractEvent<
      CancelledEvent.InputTuple,
      CancelledEvent.OutputTuple,
      CancelledEvent.OutputObject
    >;

    "Contributed(address,uint256)": TypedContractEvent<
      ContributedEvent.InputTuple,
      ContributedEvent.OutputTuple,
      ContributedEvent.OutputObject
    >;
    Contributed: TypedContractEvent<
      ContributedEvent.InputTuple,
      ContributedEvent.OutputTuple,
      ContributedEvent.OutputObject
    >;

    "MilestoneAdded(uint256,uint256)": TypedContractEvent<
      MilestoneAddedEvent.InputTuple,
      MilestoneAddedEvent.OutputTuple,
      MilestoneAddedEvent.OutputObject
    >;
    MilestoneAdded: TypedContractEvent<
      MilestoneAddedEvent.InputTuple,
      MilestoneAddedEvent.OutputTuple,
      MilestoneAddedEvent.OutputObject
    >;

    "MilestoneReleased(uint256,uint256,address)": TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;
    MilestoneReleased: TypedContractEvent<
      MilestoneReleasedEvent.InputTuple,
      MilestoneReleasedEvent.OutputTuple,
      MilestoneReleasedEvent.OutputObject
    >;

    "Refunded(address,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
  };
}
