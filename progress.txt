Nexa Fund – Progress and Rollback Guide
Date: 2025-08-13

Overview
- The app is working end‑to‑end on this machine.
- Frontend (React/Vite) runs on port 8080.
- Backend (Express/TypeScript) runs on port 5050.
- PostgreSQL database runs on port 5000 and is connected via Prisma.
- File uploads are served from backend at /uploads.

Why backend is on 5050 (not 5000)
- The local PostgreSQL service is listening on port 5000. Running the API on the same port caused TCP resets (net::ERR_CONNECTION_RESET) and broke all API/image requests.
- Moving only the backend HTTP server to 5050 resolves the collision while keeping the DB on 5000.

Current Environment (Windows/PowerShell)
Project root: C:\Users\User\OneDrive\Desktop\The NexaFund\Nexa-Fund

Backend .env (backend/.env)
# Keep your real secrets locally – these are placeholders
DATABASE_URL=postgresql://postgres:<PASSWORD>@localhost:5000/nexa_fund_db?schema=public
JWT_SECRET=<STRONG_RANDOM_SECRET>
JWT_EXPIRES_IN=7d
PORT=5050
NODE_ENV=development
FRONTEND_URL=http://localhost:8080
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100

Frontend .env (frontend/.env)
VITE_API_URL=http://127.0.0.1:5050/api

Install/Start (from project root, PowerShell)

# 1) Database – ensure PostgreSQL is running on port 5000 and DB exists
#    Connection string as per DATABASE_URL above

# 2) Backend
cd backend
npm install
npx prisma generate
npx prisma migrate deploy
# Optional (first-time): initialize roles/permissions and seed users
# npx ts-node src/scripts/initializePermissions.ts
# npx ts-node src/scripts/createSuperAdmin.ts   # admin@nexafund.com / admin123
# npx ts-node src/scripts/createAdmin.ts        # admin2@nexafund.com / admin456
npm run dev

# 3) Frontend (new terminal)
cd frontend
npm install
npm run dev

Smoke Checks
- Health: open http://127.0.0.1:5050/health (should return JSON with status OK)
- API Info: http://127.0.0.1:5050/api
- Frontend: http://localhost:8080
- Images: open any campaign image URL like http://127.0.0.1:5050/uploads/<file>

Known Good Credentials (local/dev only – seeded by scripts)
- SUPER_ADMIN: admin@nexafund.com / admin123
- ADMIN:       admin2@nexafund.com / admin456

Key Changes Completed in this Session
- Standardized frontend API calls to use the central URL from src/config.ts.
- Removed hardcoded http://localhost:5000 references across services/hooks/pages.
- Set frontend .env to VITE_API_URL=http://127.0.0.1:5050/api to avoid IPv6 localhost issues and to match backend port.
- Moved backend HTTP port from 5000 to 5050 to avoid collision with PostgreSQL running on 5000.
- Verified backend logs show:
  • Database connected successfully
  • Port: 5050

Rollback / Restore Guide (to return to this exact working state)
1) Ensure PostgreSQL is running on port 5000 and your DATABASE_URL matches that port and database name.
2) Ensure backend/.env contains PORT=5050 and FRONTEND_URL=http://localhost:8080.
3) Ensure frontend/.env contains VITE_API_URL=http://127.0.0.1:5050/api.
4) Restart both servers:
   - Backend terminal:
     cd backend
     npm run dev
   - Frontend terminal:
     cd frontend
     npm run dev
5) Hard refresh the browser (Ctrl+F5) and verify:
   - http://127.0.0.1:5050/health returns JSON
   - Frontend at http://localhost:8080 loads campaigns/images
   - Login works with the seeded accounts (if seeded)

Troubleshooting Quick Reference
- net::ERR_CONNECTION_RESET on all API calls/images:
  • The frontend is likely pointing to the wrong port. Confirm frontend/.env → VITE_API_URL=http://127.0.0.1:5050/api and restart Vite.
  • Or the backend started on a different port. Confirm backend logs show Port: 5050.
- 404 on images from /uploads:
  • Check backend log and ensure /uploads is being served. Images live under backend/uploads.
- Prisma errors on startup:
  • Re-run: npx prisma generate, npx prisma migrate deploy. Confirm DATABASE_URL is correct.
- CORS issues:
  • FRONTEND_URL in backend/.env must be http://localhost:8080.

Operational Notes
- Keep secrets in .env files; they are not committed.
- Avoid using port 5000 for the backend – reserved by local PostgreSQL here.
- Always restart Vite after changing any .env values; env is read at startup.

Next Steps (suggested)
- Add a concurrent dev script at the repo root to start both apps easily.
- Add a CI workflow to run lint/build/tests.
- Optional: add a docker-compose with services: backend (5050), db (5000 or 5432 mapping), frontend (8080).

This document is the authoritative rollback point for this working configuration.
# ===== Blockchain (Smart Contracts) – Today’s Work =====

Contracts live in `smart-contracts` (Hardhat + ethers v6).

What we added today
- Scripts: `scripts/smoke_weighted.ts` for quick local smoke test
- Tests: `test/NexaFundWeighted.spec.ts`, `test/MilestoneEscrow.spec.ts`
- README: Added a full “Smart Contracts” section with local dev, deploy, REPL, and common pitfalls
- left at.txt: Updated checkpoint with exact commands and troubleshooting

How to run locally (PowerShell)
1) Start node (Terminal A)
   cd "Nexa-Fund\\smart-contracts"
   npx hardhat node

2) Deploy (Terminal B)
   cd "Nexa-Fund\\smart-contracts"
   npx hardhat run --network localhost scripts/deploy_weighted.ts

3) Console (Terminal B)
   npx hardhat console --network localhost
   // Then in the console paste one line at a time:
   const addr = "0x...";
   await ethers.provider.getCode(addr)
   const [admin, b1, b2] = await ethers.getSigners();
   const c = await ethers.getContractAt("NexaFundWeighted", addr);
   await c.connect(b1).contribute({ value: ethers.parseEther("3.0") });
   await c.connect(b2).contribute({ value: ethers.parseEther("1.0") });
   let nowTs = (await ethers.provider.getBlock("latest")).timestamp;
   let startTs = BigInt(nowTs) + 120n; let endTs = startTs + 3600n;
   await c.openVoting(0, startTs, endTs);
   await network.provider.send("evm_setNextBlockTimestamp", [Number(startTs + 1n)]); await network.provider.send("evm_mine");
   await c.connect(b1).voteMilestone(0, true);
   (await c.getMilestone(0))[2]

Automated tests
   cd "Nexa-Fund\\smart-contracts"
   npm install
   npx hardhat test
   // Expect: 2 passing (MilestoneEscrow + NexaFundWeighted)

Troubleshooting
- BAD_WINDOW → choose a start time strictly in the future (add 60–600s)
- NOT_IN_WINDOW → advance chain time with evm_setNextBlockTimestamp + evm_mine
- INSUFFICIENT → top-up with contribute() so balance >= milestone amount
- EADDRINUSE on npx hardhat node → a node is already running on 8545; reuse it or kill the PID
# Nexa Fund - Progress Report

## ✅ Phase 1: Foundation & Backend Setup

### 1. Frontend Cleanup & Backend Structure
- Removed Supabase dependencies, replaced with REST API calls
- Created complete backend structure with Express.js + TypeScript + Prisma
- Setup PostgreSQL database (Username: `shabi`, Password: `2003`, DB: `nexa_fund_db`)
- Configured environment variables and JWT authentication

### 2. Database & Authentication
- Created models: User, Campaign, Milestone, Contribution, Vote, Report
- Implemented JWT-based auth with bcrypt password hashing
- Added proper error handling, CORS, rate limiting, security headers
- All 15+ tests passing successfully

## ✅ Phase 2: Image Handling & UX

### 3. Image System Overhaul
- **Migrated from localStorage to server-side storage** using multer
- Created `/api/uploads` endpoint for file handling
- Fixed critical CORS & Helmet bugs for cross-origin image loading
- Implemented progressive image loading with skeleton placeholders

### 4. Campaign Management
- Built complete campaign CRUD with image editing
- Fixed data structure mismatches and white screen issues
- Enhanced campaign details page with proper media display
- Cleaned up Footer and Blog page template content

## ✅ Phase 3: Campaign Features

### 5. Milestone & Reward Systems
- **Complete milestone system:** CRUD operations, voting, vote tracking
- **Reward tier management:** Dynamic creation/editing, full API
- API endpoints for milestones and reward tiers with proper auth

### 6. UI/UX Improvements
- **Homepage:** Fixed buttons, added realistic demo content, responsive design
- **Browse page:** Fixed search styling, corrected time calculations
- **Profile & Dashboard pages:** Complete user management functionality
- Fixed TypeScript errors related to React Query and API calls

## ✅ Phase 4: Enterprise User Role System (MAJOR)

### 7. Database Schema Overhaul
- Added `role` and `status` fields to User model
- Created Permission, RolePermission, UserPermission models
- User roles: SUPER_ADMIN, ADMIN, MODERATOR, CREATOR, BACKER, USER
- User status: ACTIVE, SUSPENDED, BANNED, PENDING_VERIFICATION
- Migration: `20250616010635_add_user_roles_and_permissions`

### 8. Permission System (32+ Permissions)
- **8 Categories:** Campaign, User, Contribution, Report, Milestone, Reward Tier, Platform, Moderation
- **Role hierarchy:** SUPER_ADMIN (all permissions) → ADMIN (25+) → MODERATOR (15+) → CREATOR (12+) → BACKER (8+) → USER (5+)
- **Auto-role progression:** USER → BACKER (first contribution) → CREATOR (verification)

### 9. Backend Implementation
- **`permissions.ts`:** All permission constants and role mappings
- **`permissionService.ts`:** hasPermission, grantPermission, updateUserRole, autoUpgradeRole, etc.
- **Enhanced auth middleware:** requireRole, requirePermission, requireOwnership, etc.
- **Updated controllers:** Replaced hardcoded admin checks with role-based permissions

### 10. Database Initialization
- Created initialization script for permissions and role mappings
- Generated super admin user (admin@nexafund.com, SUPER_ADMIN, ACTIVE)
- Fixed all TypeScript compilation errors
- Regenerated Prisma client for type safety

## ✅ Phase 5: Admin Panel & Smart Navigation

### 11. Admin Campaign Management
- **Admin Panel:** Comprehensive dashboard with statistics and campaign oversight
- **Campaign Management:** Full admin interface with search, filter, view/edit controls
- **Admin Edit Campaign:** Complete admin campaign editing with all fields and status management
- **Navigation improvements:** Added "Back to Home" button in admin panel header

### 12. Smart Navigation System
- **Context-aware navigation:** Tracks user origin (browse vs admin) via URL parameters
- **Browse flow:** Browse→Campaign→"Back to Browse" navigation
- **Admin flow:** Admin Panel→Campaign Management→Campaign→"Back to Campaign Management"
- **Creator flow:** Campaign→Edit Images→"Back to Campaign" with context preservation
- **Fallback navigation:** Default "Back to campaigns" for direct visits

## 🔧 Key Commands
```powershell
# Backend setup
cd "C:\Users\shabi\Desktop\Nexa Fund\backend"
npm install
npx prisma migrate dev
npx prisma generate
npx ts-node src/scripts/initializePermissions.ts
npm run dev

# Frontend setup
cd "C:\Users\shabi\Desktop\Nexa Fund\frontend"
npm install
npm run dev
```

## 🚧 Major Issues Resolved
- **CORS & Helmet:** Fixed cross-origin image loading
- **Image handling:** Migrated from localStorage to server storage
- **Permission system:** Implemented comprehensive RBAC
- **TypeScript errors:** Fixed React Query and API type issues
- **Database migrations:** Resolved schema conflicts
- **UI bugs:** Fixed white screens, navigation, time calculations

## 🎯 Current Status: Production-Ready MVP

### ✅ Core Systems
- **Backend:** Express.js + TypeScript + Prisma + PostgreSQL (port 5000)
- **Frontend:** React + TypeScript + Tailwind CSS + Vite (port 8080)
- **Database:** Full schema with RBAC system
- **Authentication:** JWT with comprehensive role/permission system
- **File management:** Server-side image upload and serving
- **Security:** Enterprise-level with CORS, rate limiting, validation

### ✅ Features Complete
- **User management:** 6-tier role hierarchy, 32+ permissions, auto-progression
- **Campaign system:** Full CRUD, reward tiers, milestones, voting
- **Admin panel:** Complete dashboard with statistics, campaign management, smart navigation
- **Smart navigation:** Context-aware back navigation (browse↔campaign, admin↔campaign)
- **Image handling:** Professional upload/management system
- **UI/UX:** Profile, Dashboard, responsive design, error handling
- **Security:** User suspension/banning, fraud prevention, ownership validation

### ✅ API Endpoints (25+)
- Authentication: register, login, profile management
- Campaigns: CRUD with ownership validation
- Reward tiers: Dynamic creation/management
- Milestones: Voting system with tracking
- Users: Role management, verification, statistics
- File uploads: Secure image handling

## 📊 Project Metrics
- **Backend:** 30+ endpoints, 9 models (added Update model), 32+ permissions, 12+ middleware
- **Frontend:** 15+ pages, 45+ components, admin dashboard, smart navigation, activity tracking
- **Features:** Updates system, backer analytics, media galleries, campaign status security
- **Security:** JWT auth, RBAC, campaign status enforcement, input validation, rate limiting
- **Testing:** 20+ test suites, core functionality covered
- **Database:** PostgreSQL with advanced relationships (Users→Campaigns→Updates→Contributions→Activity)

## ✅ Phase 6: Advanced Campaign Features & Security

### 13. Updates & Communication System
- **Campaign Updates:** Complete CRUD system for project updates with rich content support
- **Creator Communication:** Image support, chronological display, creator-only controls
- **Database Enhancement:** Added Update model with proper relationships
- **UpdatesSection Component:** Professional update display with create/edit/delete modals
- **Real-time Updates:** React Query integration for immediate UI updates

### 14. Backers Analytics & Management
- **Comprehensive Backer Dashboard:** Statistics, contribution analytics, recent activity
- **Privacy Controls:** Wallet addresses visible only to campaign creators
- **Contribution Tracking:** Grouped contributions by user with totals and tier badges
- **Reward Tier Analytics:** Live contribution counts for each reward tier
- **Super/Gold/Silver Backer Badges:** Dynamic tier classification based on contribution amounts

### 15. Media Gallery & Project Showcase
- **Project Gallery Section:** Beautiful image grid under "Project Story" tab
- **Lightbox Modal:** Full-screen image viewing with navigation controls
- **Keyboard Navigation:** Arrow keys, escape key support for accessibility
- **Mobile Responsive:** Optimized for all device sizes with touch support
- **Image Counter:** Visual progress indicator for gallery navigation

### 16. Activity Tracking System
- **User Activity Dashboard:** Complete activity feed with real-time updates
- **Activity Types:** Campaign creation/updates, contributions, milestone completion, updates posting
- **Dashboard Integration:** Recent activity preview with "View All Activity" option
- **React Query Caching:** Optimized performance with automatic refresh
- **Visual Indicators:** Icons and timestamps for each activity type

### 17. Campaign Status Security Implementation
- **Active Campaign Enforcement:** Only ACTIVE campaigns can be backed (backend + frontend validation)
- **Creator Guidance System:** Pending campaigns show completion checklist and action buttons
- **Public Browse Filtering:** Browse/Featured/Trending pages only show ACTIVE campaigns
- **Status-Based UI:** Dynamic button states, colors, and messaging based on campaign status
- **Comprehensive Messaging:** Different guidance for creators vs visitors on pending campaigns
- **Security Validation:** Multiple layers of validation to prevent unauthorized backing

### 18. UI/UX Polish & About Page
- **About Page Overhaul:** Updated from generic "CrowdFund" to blockchain-focused "Nexa Fund" content
- **Relevant Content:** Platform features, blockchain benefits, decentralization messaging
- **Visual Improvements:** Replaced broken images with custom gradient sections and icons
- **Brand Consistency:** Updated all content to reflect Nexa Fund's blockchain focus
- **Button Styling Fixes:** Resolved visibility issues with outline buttons

## 🚀 Next Phase: Blockchain Integration
1. **Smart contracts:** Deploy to Polygon Mumbai, milestone-based funding
2. **Web3 integration:** MetaMask connection, IPFS metadata storage
3. **Advanced features:** AI fraud detection, real-time notifications
4. **Production:** Docker, CI/CD, cloud deployment, CDN integration

## ✅ Achievement Summary
**🎯 Status:** Production-ready crowdfunding platform with enterprise security and advanced features
**🔐 Security:** Comprehensive RBAC with 32+ permissions, campaign status enforcement, fraud prevention
**🏗️ Architecture:** Scalable, maintainable, TypeScript-based with advanced database relationships
**📱 UX:** Professional, responsive design with complete user management, activity tracking, and media galleries
**💼 Features:** Updates system, backer analytics, media galleries, activity tracking, campaign security
**🚀 Ready for:** Blockchain integration and production deployment 